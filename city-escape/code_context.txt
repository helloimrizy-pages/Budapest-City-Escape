// File: src/components/Footer/Footer.tsx
import { FaFacebook, FaTwitter, FaInstagram } from "react-icons/fa";
import { useLocation } from "react-router-dom";

const Footer = () => {
  const location = useLocation();

  // If on the map page or any riddle page, do not show the navbar
  if (
    location.pathname === "/map" ||
    /^\/riddle\/\d+$/.test(location.pathname) // Matches paths like /riddle/1, /riddle/2, etc.
  ) {
    return null;
  }

  const isHomePage = location.pathname === "/";

  return (
    <footer
      className={`${
        isHomePage ? "bg-black" : "bg-[#0d1321]"
      } text-white py-10 relative z-10`}
    >
      <div className="max-w-7xl mx-auto px-6 lg:px-8">
        {/* Top section with navigation links */}
        <div className="flex flex-col md:flex-row justify-between items-center mb-8">
          <div className="mb-6 md:mb-0">
            <h2 className="text-2xl font-bold">City Escape Games</h2>
          </div>
          <nav className="flex space-x-4">
            <a
              href="/about"
              className="hover:text-gray-300 transition-colors duration-200"
            >
              About Us
            </a>
            <a
              href="/faq"
              className="hover:text-gray-300 transition-colors duration-200"
            >
              FAQ
            </a>
            <a
              href="/contact"
              className="hover:text-gray-300 transition-colors duration-200"
            >
              Contact Us
            </a>
            <a
              // href=""
              className="hover:text-gray-300 transition-colors duration-200"
            >
              Terms & Conditions
            </a>
            <a
              // href=""
              className="hover:text-gray-300 transition-colors duration-200"
            >
              Privacy Policy
            </a>
          </nav>
        </div>

        {/* Divider */}
        <hr className="border-t border-white-300 mb-8 opacity-20" />

        {/* Bottom section with social media */}
        <div className="flex flex-col md:flex-row justify-between items-center">
          <p className="text-sm mb-4 md:mb-0">
            &copy; {new Date().getFullYear()} City Escape Games. All rights
            reserved.
          </p>
          <div className="flex space-x-6">
            <a
              href="https://facebook.com"
              target="_blank"
              rel="noopener noreferrer"
              className="hover:text-gray-300 transition-colors duration-200"
              aria-label="Facebook"
            >
              <FaFacebook size={20} />
            </a>
            <a
              href="https://twitter.com"
              target="_blank"
              rel="noopener noreferrer"
              className="hover:text-gray-300 transition-colors duration-200"
              aria-label="Twitter"
            >
              <FaTwitter size={20} />
            </a>
            <a
              href="https://instagram.com"
              target="_blank"
              rel="noopener noreferrer"
              className="hover:text-gray-300 transition-colors duration-200"
              aria-label="Instagram"
            >
              <FaInstagram size={20} />
            </a>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

// File: src/components/Home/Home.tsx
import backgroundImage from "../../assets/budapest-background.jpg";

const Home = () => {
  return (
    <div
      className="min-h-screen flex flex-col items-center justify-center bg-cover bg-center bg-no-repeat relative"
      style={{
        backgroundImage: `url(${backgroundImage})`,
        backgroundPosition: "0% 5%",
      }}
    >
      {/* Overlay */}
      <div className="absolute inset-0 bg-black bg-opacity-50"></div>

      {/* Content */}
      <div className="relative z-10 text-center">
        <h1 className="text-5xl font-bold text-white mb-6">
          Welcome to Explore Budapest!
        </h1>
        <p className="text-xl text-white max-w-2xl mb-8">
          Discover the hidden treasures of Budapest while solving fun riddles. A
          perfect blend of history, exploration, and entertainment awaits!
        </p>
        <a
          href="/map"
          className="px-6 py-3 bg-white bg-opacity-30 text-white rounded-md shadow-md hover:bg-opacity-40 transition"
        >
          Start the Game
        </a>
      </div>
    </div>
  );
};

export default Home;

// File: src/components/Map/Map.module.css
.map {
  height: 100vh;
  width: 100vw;
}

.popup {
  font-family: Arial, sans-serif;
  padding: 10px;
  text-align: left;
  color: #333;
  max-width: 300px; /* Restrict the popup's maximum width */
  overflow-wrap: break-word; /* Ensure long text breaks nicely */
}

.popup h3 {
  margin: 0 0 10px 0;
  font-size: 18px;
  font-weight: bold;
}

.popup img {
  display: block;
  width: 100%; /* Ensure the image fits within the popup */
  max-height: 150px; /* Restrict the maximum height */
  object-fit: cover; /* Scale the image while maintaining aspect ratio */
  border-radius: 8px;
  margin-bottom: 10px;
}

.popup p {
  margin: 0 0 10px 0;
  line-height: 1.6;
}

.popup button {
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  padding: 8px 12px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s;
}

.popup button:hover {
  background-color: #0056b3;
}

// File: src/components/Map/Map.tsx
import { useState, useEffect } from "react";
import { MapContainer, Marker, Popup, TileLayer, GeoJSON } from "react-leaflet";
import { useNavigate } from "react-router-dom";
import Button from "../Shared/Button";
import L from "leaflet";
import "leaflet/dist/leaflet.css"; // Ensure you have this import

const Map = () => {
  const navigate = useNavigate();

  const [geojsonData, setGeojsonData] = useState(null);

  useEffect(() => {
    fetch("/data.json")
      .then((response) => response.json())
      .then((data) => setGeojsonData(data))
      .catch((error) => console.error("Error loading GeoJSON:", error));
  }, []);

  const tileStyleURLs = {
    light_all: "https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png",
    dark_all: "https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png",
    voyager:
      "https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png",
    local: "/tiles/{z}/{x}/{y}.png",
  };

  const [mapStyle, setMapStyle] =
    useState<keyof typeof tileStyleURLs>("voyager");

  const handleStyleChange = (style: keyof typeof tileStyleURLs) => {
    setMapStyle(style);
  };

  interface Passcodes {
    [key: number]: string;
  }

  const handleProceed = (riddleId: number) => {
    const passcode = prompt("Enter the passcode to proceed:");
    const passcodes: Passcodes = {
      1: "1234",
      2: "5678",
      3: "abcd",
    };

    if (passcode === passcodes[riddleId]) {
      navigate(`/riddle/${riddleId}`);
    } else {
      alert("Incorrect passcode. Try again!");
    }
  };

  const numberIcon = (number: number) =>
    L.divIcon({
      className: "",
      html: `<div class="flex items-center justify-center w-8 h-8 rounded-full bg-red-600 text-white font-bold">${number}</div>`,
      iconSize: [32, 32],
      iconAnchor: [16, 32],
      popupAnchor: [0, -32],
    });

  const createPopupContent = (
    title: string,
    imgSrc: string,
    description: string,
    coords: [number, number],
    handleProceed: () => void
  ) => (
    <div className="space-y-4">
      <h3 className="text-xl font-bold">{title}</h3>
      <img src={imgSrc} alt={title} className="w-full h-auto rounded-lg mb-2" />
      <p>{description}</p>
      <p>
        <em>
          <strong>
            Please scan the QR code at this location to reveal the passcode and
            proceed to the riddle.
          </strong>
        </em>
      </p>
      <div className="flex gap-2 justify-center">
        <Button
          onClick={handleProceed}
          className="bg-white text-black border border-gray-300 shadow px-4 py-2 rounded hover:bg-gray-100 transition-colors duration-150"
        >
          Proceed
        </Button>
        <Button
          onClick={() => {
            const [lat, lng] = coords;
            const mapsUrl = `https://www.google.com/maps?q=${lat},${lng}`;
            window.open(mapsUrl, "_blank");
          }}
          className="bg-white text-black border border-gray-300 shadow px-4 py-2 rounded hover:bg-gray-100 transition-colors duration-150"
        >
          Navigate
        </Button>
      </div>
    </div>
  );

  const popupContent1 = createPopupContent(
    "Kálvin Square (Former Gate)",
    "https://welovebudapest.com/i/9f/kalvin4.exact1980w.jpg",
    "Kálvin tér, once situated near the medieval city wall of Pest, reveals layers of history beneath today’s modern square. Archaeological investigations have uncovered remnants of these defensive structures, offering a glimpse into how this bustling central area was once fortified against threats. Standing here connects you to centuries of Budapest’s evolving story, from fortified frontier to vibrant urban hub.",
    [47.48934006387308, 19.061237053399193],
    () => handleProceed(1) // Pass riddleId 1
  );

  const popupContent2 = createPopupContent(
    "Playground at Bástya Street",
    "https://pestbuda.hu/uploads/media/news/0001/05/thumb_4140_news_big.jpg",
    "The playground at Bástya utca intertwines everyday leisure with deep-rooted history. Here, where children now play, traces of Pest’s medieval city wall once stood as guardians of the town. This modern urban spot invites you to reflect on centuries past, as the laughter of today’s families echoes amid stones that once fortified the city’s heart.",
    [47.48940736567986, 19.05978125525111],
    () => handleProceed(2) // Pass riddleId 2
  );

  const popupContent3 = createPopupContent(
    "Residential Building on the Old Wall",
    "https://welovebudapest.com/i/8e/varosfal_korosi-tamas_20160330.exact1980w.jpg",
    "This residential building stands atop what once formed part of Pest’s medieval city wall. Beneath its foundations lie centuries of layered defense, now woven quietly into everyday living spaces. Within these modern walls, echoes of an older city linger, bridging the past and present in the heart of Budapest.",
    [47.49147045884514, 19.060478228267108],
    () => handleProceed(3) // Pass riddleId 3
  );

  return (
    <div className="relative w-full h-screen">
      {/* Fixed Buttons Container */}
      <div className="fixed z-[9999] top-1/2 left-2 -translate-y-1/2 bg-white rounded p-2 flex flex-col gap-2 border border-gray shadow-lg">
        <button
          onClick={() => handleStyleChange("light_all")}
          className="p-1 cursor-pointer border-none rounded text-sm hover:bg-gray-200"
        >
          Light
        </button>
        <hr className="my-1 border-t border-gray-300" />
        <button
          onClick={() => handleStyleChange("dark_all")}
          className="p-1 cursor-pointer border-none rounded text-sm hover:bg-gray-200"
        >
          Dark
        </button>
        <hr className="my-1 border-t border-gray-300" />
        <button
          onClick={() => handleStyleChange("voyager")}
          className="p-1 cursor-pointer border-none rounded text-sm hover:bg-gray-200"
        >
          Voyager
        </button>
        <hr className="my-1 border-t border-gray-300" />
        <button
          onClick={() => handleStyleChange("local")}
          className="p-1 cursor-pointer border-none rounded text-sm hover:bg-gray-200"
        >
          Local Tiles
        </button>
        <hr className="my-1 border-t border-gray-300" />
        <button
          onClick={() => navigate("/")}
          className="p-1 cursor-pointer border-none rounded text-sm hover:bg-gray-200"
        >
          Exit
        </button>
      </div>

      <MapContainer
        center={[47.4894285791889, 19.059757146314627]}
        zoom={13}
        minZoom={12} // Prevent zooming out too far
        maxZoom={17} // Adjust based on your tiles
        scrollWheelZoom={true}
        className="w-full h-full"
      >
        {/* Dynamically Render the Base Tile Layer */}
        {mapStyle !== "local" ? (
          <TileLayer
            url={tileStyleURLs[mapStyle]}
            attribution='&copy; <a href="https://www.carto.com/">CartoDB</a>'
          />
        ) : (
          <>
            {/* Light Base Map for Local Style */}
            <TileLayer
              url={tileStyleURLs.voyager}
              attribution='&copy; <a href="https://www.carto.com/">CartoDB</a>'
            />
            {/* Local Tile Overlay */}
            <TileLayer
              url={tileStyleURLs.local}
              noWrap={true} // Prevent wrapping of tiles
              opacity={0.7} // Set transparency for overlay
            />
          </>
        )}
        {/* Marker 1 */}
        <Marker
          position={[47.48934006387308, 19.061237053399193]}
          icon={numberIcon(1)}
        >
          <Popup>{popupContent1}</Popup>
        </Marker>

        {/* Marker 2 */}
        <Marker
          position={[47.48940736567986, 19.05978125525111]}
          icon={numberIcon(2)}
        >
          <Popup>{popupContent2}</Popup>
        </Marker>

        {/* Marker 3 */}
        <Marker
          position={[47.49147045884514, 19.060478228267108]}
          icon={numberIcon(3)}
        >
          <Popup>{popupContent3}</Popup>
        </Marker>

        {geojsonData && <GeoJSON data={geojsonData} />}
      </MapContainer>
    </div>
  );
};

export default Map;

// File: src/components/Map/index.ts
export { default } from "./Map";

// File: src/components/NavBar/NavBar.tsx
import { Link, useLocation } from "react-router-dom";
import Logo from "../../assets/logo.png";

const Navbar = () => {
  const location = useLocation();

  // If on the map page or any riddle page, do not show the navbar
  if (
    location.pathname === "/map" ||
    /^\/riddle\/\d+$/.test(location.pathname) // Matches paths like /riddle/1, /riddle/2, etc.
  ) {
    return null;
  }

  return (
    <nav className="absolute top-0 left-0 w-full z-50 text-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          <div className="flex items-center space-x-2 text-xl font-bold">
            <Link to="/">
              <img
                src={Logo}
                alt="Logo"
                className="w-20 h-auto object-contain"
              />
            </Link>
            <Link
              to="/"
              className="text-white hover:text-gray-300 transition-colors duration-200"
            >
              Explore Budapest
            </Link>
          </div>
          <div className="hidden md:flex space-x-4">
            <Link
              to="/map"
              className="text-white hover:text-gray-300 transition-colors duration-200"
            >
              Start the Game
            </Link>
            <Link
              to="/how-it-works"
              className="text-white hover:text-gray-300 transition-colors duration-200"
            >
              How Does It Work?
            </Link>
            <Link
              to="/faq"
              className="text-white hover:text-gray-300 transition-colors duration-200"
            >
              FAQ
            </Link>
            <Link
              to="/about"
              className="text-white hover:text-gray-300 transition-colors duration-200"
            >
              About Us
            </Link>
            <Link
              to="/contact"
              className="text-white hover:text-gray-300 transition-colors duration-200"
            >
              Contact Us
            </Link>
          </div>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

// File: src/components/RiddlePage/RiddlePage.module.css
.container {
  font-family: Arial, sans-serif;
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
}

.header {
  margin-bottom: 20px;
  border-bottom: 2px solid #ddd;
  padding-bottom: 10px;
  text-align: center;
}

.header h1 {
  font-size: 24px;
  font-weight: bold;
}

.content {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.image {
  width: 100%;
  height: auto;
  border-radius: 8px;
}

.text {
  text-align: justify;
  font-size: 16px;
  line-height: 1.8;
  color: #333;
}

.quiz {
  display: block;
  text-align: center;
  margin-top: 30px;
  border: 2px solid #ddd;
  padding: 15px;
  border-radius: 10px;
  background-color: #f9f9f9;
}

.quiz p {
  font-weight: bold;
  margin-bottom: 20px;
  margin-top: 20px;
}

.label {
  display: flex; /* Align radio button and text in a row */
  align-items: center; /* Vertically align text with the radio button */
  margin-bottom: 12px;
  text-align: left;
  font-size: 16px;
  cursor: pointer;
  padding: 15px;
  background-color: #f9f9f9;
  border: 2px solid #e0e0e0;
  border-radius: 8px;
  transition: background-color 0.3s ease, border-color 0.3s ease;
}

.label:hover {
  background-color: #f0f8ff; /* Light blue background on hover */
  border-color: #007bff; /* Primary color border on hover */
}

.label input {
  margin-right: 15px; /* Add space between radio button and text */
  width: 18px; /* Standard radio button width */
  height: 18px; /* Standard radio button height */
  cursor: pointer;
}

.label input:checked + &::before {
  background: #007bff; /* Primary color when selected */
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.2); /* Glow effect */
}

.label input:checked + &::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 14px; /* Align the dot within the circle */
  transform: translateY(-50%);
  width: 10px;
  height: 10px;
  background: #ffffff; /* Inner white dot */
  border-radius: 50%;
}

.label input:checked + span {
  color: #007bff; /* Change text color when selected */
}

.buttonContainer {
  display: flex;
  justify-content: center; /* Horizontally center the button */
  align-items: center; /* Vertically center the button if needed */
  margin-top: 20px; /* Adjust margin as necessary */
  width: 100%; /* Ensure the container spans full width */
}

.feedback {
  margin-top: 20px;
  padding: 15px;
  border-radius: 8px;
  text-align: center;
  font-size: 16px;
  font-weight: bold;
}

.image {
  margin-bottom: 10px;
}

.successFeedback {
  text-align: center;
  color: #22c55e; /* Tailwind's green-500 equivalent */
  font-weight: bold;
  margin-top: 16px;
}

.successFeedback p {
  margin: 8px 0; /* Adds spacing between each feedback paragraph */
}

// File: src/components/RiddlePage/RiddlePage.tsx
// RiddlePage.tsx

import { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import FeedbackMessage from "../Shared/FeedbackMessage";
import Button from "../Shared/Button";
import styles from "./RiddlePage.module.css";

interface Question {
  question: string;
  options: string[];
  correctAnswer: string;
}

interface Riddle {
  title: string;
  questions: Question[];
  images: string[]; // Array of image URLs
  description: string[];
  successFeedback: string[]; // Specific feedback for each riddle
}

const riddles: Record<string, Riddle> = {
  "1": {
    title: "Kálvin Square (Former Gate)",
    questions: [
      {
        question:
          "How do you think the presence of physical walls, like the city wall, influenced children's play and social interactions in this area?",
        options: [
          "They restricted where children could play, forcing them to remain close to family and familiar faces.",
          "They encouraged children to creatively use limited space, finding new ways to interact despite barriers.",
          "They had no real effect; children’s play remained unchanged regardless of physical boundaries.",
          "They sparked curiosity about what lay beyond the walls, influencing children to imagine new worlds.",
        ],
        correctAnswer:
          "They encouraged children to creatively use limited space, finding new ways to interact despite barriers.",
      },
      {
        question:
          "In what ways do adults’ complaints create invisible walls in communication with children?",
        options: [
          "Complaints can make children feel misunderstood and hesitant to share their thoughts.",
          "Complaints serve as harmless expressions that don’t significantly affect children’s willingness to talk.",
          "Complaints can create an atmosphere of tension, limiting open and honest conversation.",
          "Complaints lead children to distrust adults, viewing them as constantly critical rather than supportive.",
        ],
        correctAnswer:
          "Complaints can make children feel misunderstood and hesitant to share their thoughts.",
      },
      {
        question:
          "Can you recall a time when a complaint disrupted a conversation or interaction? What was the outcome?",
        options: [
          "The complaint caused everyone to fall silent, halting the flow of the conversation.",
          "The complaint encouraged people to address the issue openly, ultimately improving understanding.",
          "The complaint was ignored, and the conversation continued smoothly without acknowledgment.",
          "The complaint led some participants to withdraw and others to speak more cautiously, altering the group’s dynamic.",
        ],
        correctAnswer:
          "The complaint led some participants to withdraw and others to speak more cautiously, altering the group’s dynamic.",
      },
    ],
    images: [
      "https://welovebudapest.com/i/9f/kalvin4.exact1980w.jpg",
      "https://welovebudapest.com/i/13/kalvin1844vagy1852.exact1980w.jpg",
    ],
    description: [
      "Long ago, the area around Bástya utca was marked by the presence of Pest’s old city wall—an imposing structure that once determined who could enter, leave, or linger. This defensive barrier, while offering safety from outside threats, also created subtle divisions within the community. Life thrived inside and outside its borders, but the wall’s presence encouraged certain patterns of behavior, shaping how residents interacted, moved, and played.",
      "Over time, as the city expanded and the old fortifications lost their purpose, these walls were removed or integrated into the urban fabric. Today, in place of that once formidable boundary, a playground stands—an open, welcoming space dedicated to children’s play. Here, laughter and imagination flow freely, unfettered by the physical restrictions that characterized this spot centuries ago. Kids chase each other, invent games, and communicate without the heavy weight of history. They cross “boundaries” made of chalk lines rather than stone, breaking down social barriers through simple acts of cooperation, curiosity, and kindness.",
      "However, while children generally approach the world with openness, adults sometimes construct their own invisible barriers through habits like complaining or criticizing. These intangible “walls” of negativity can limit understanding and discourage genuine connection. Within this playground setting, we’re reminded that human interactions—whether in childhood or adulthood—can be shaped by the presence or absence of both visible and invisible barriers. Overcoming these obstacles, whether physical stones or critical tones, leads to healthier, more vibrant communities.",
    ],
    successFeedback: [
      "Great job! You've completed the riddle.",
      "Passcode for next location 'Playground at Bástya Street': 1234",
    ],
  },
  "2": {
    title: "Playground at Bástya Street",
    questions: [
      {
        question:
          "How do you think the presence of physical walls, like the city wall, influenced children's play and social interactions in this area?",
        options: [
          "The walls restricted children’s access to open spaces, encouraging creativity in limited areas.",
          "The walls provided a sense of safety, allowing children to play freely without external threats.",
          "The walls created curiosity about what lay beyond, fostering imaginative play.",
          "All of the above.",
        ],
        correctAnswer: "All of the above.",
      },
      {
        question:
          "In what ways do adults' complaints create invisible walls in communication with children?",
        options: [
          "Complaints make children feel unheard or misunderstood, reducing their willingness to communicate openly.",
          "Complaints help children understand their mistakes and foster better behavior.",
          "Complaints create an atmosphere of tension, discouraging natural and honest interactions.",
          "Both A and C.",
        ],
        correctAnswer: "Both A and C.",
      },
      {
        question:
          "Can you recall a time when a complaint disrupted a conversation or interaction? What was the outcome?",
        options: [
          "The complaint led to silence, stopping the conversation altogether.",
          "The complaint encouraged reflection, leading to a constructive outcome.",
          "The complaint caused tension, resulting in misunderstanding or avoidance.",
          "Both A and C.",
        ],
        correctAnswer: "Both A and C.",
      },
    ],
    images: [
      "https://pestbuda.hu/uploads/media/news/0001/05/thumb_4140_news_big.jpg",
    ],
    description: [
      "The playground at Bástya utca, vibrant with the laughter of children today, contrasts sharply with its historical roots. Centuries ago, this area was bustling with life, situated near the medieval city wall of Pest. The wall, while offering protection from external threats, created both physical and social divisions within the community. Inside the wall, children played in limited, enclosed spaces, fostering creativity in how they interacted and used their surroundings. Meanwhile, outside the wall, life was different, often leading to curiosity and a longing to explore the unknown.",
      "As the city walls were demolished over time to accommodate urban growth, the area transformed into an open space. Today, the playground symbolizes freedom and connection, where children freely chase one another, invent games, and communicate without barriers. However, this openness is often in contrast to how adults engage with one another. Adults frequently construct emotional barriers—'invisible walls'—through habits like complaining or criticism. These intangible walls can stifle relationships, hinder communication, and limit understanding between generations.",
      "The playground reminds us that while physical walls can be torn down, the invisible barriers we create in our interactions often persist. It challenges us to reflect on how we build or break these walls in our daily lives, especially when interacting with children, whose natural openness and curiosity can inspire us to communicate more freely and authentically.",
    ],
    successFeedback: [
      "Great job! You've completed the riddle.",
      "Passcode for next location 'Residential Building on the Old Wall': abcd",
    ],
  },
  "3": {
    title: "Residential Building on the Old Wall",
    questions: [
      {
        question:
          "What challenges did residents face when the city wall was built or demolished in terms of their sense of community?",
        options: [
          "The city wall restricted communication, isolating residents within a small, close-knit group.",
          "The demolition of the wall brought unfamiliar people into the community, leading to tension.",
          "Residents struggled to adapt to new spaces, losing the sense of safety the wall provided.",
          "All of the above.",
        ],
        correctAnswer: "All of the above.",
      },
      {
        question:
          "How does complaining about neighbors or local issues contribute to a sense of division among residents?",
        options: [
          "Complaints can foster mistrust and tension, making residents hesitant to engage openly.",
          "Complaints encourage residents to work together to address shared concerns.",
          "Complaints are harmless and rarely affect the relationships between neighbors.",
          "Complaints create visible divisions, such as different groups avoiding one another.",
        ],
        correctAnswer:
          "Complaints can foster mistrust and tension, making residents hesitant to engage openly.",
      },
      {
        question:
          "Reflect on how you communicate your concerns about your living environment. Do you find it builds bridges or walls with your neighbors?",
        options: [
          "Sharing concerns constructively can lead to collaboration and mutual understanding.",
          "Expressing frustration without resolution often increases tension and divides the community.",
          "Avoiding communication altogether prevents conflict but also limits opportunities for unity.",
          "Both A and B.",
        ],
        correctAnswer: "Both A and B.",
      },
    ],
    images: [
      "https://welovebudapest.com/i/8e/varosfal_korosi-tamas_20160330.exact1980w.jpg",
      "https://welovebudapest.com/i/d5/varosfal_korosi-tamas_20160330.exact1980w.jpg",
    ],
    description: [
      "Nestled within the heart of Budapest, the residential garden of Múzeum körút 31-33 offers a quiet sanctuary away from the bustling streets. Historically, this area served as a boundary between the protected city and its surrounding countryside, where residents sought refuge behind the city wall. While the walls provided physical safety, they also created a psychological divide, limiting interactions between those inside and outside the walls.",
      "When the city wall was eventually demolished to make way for urban expansion, it symbolized the transition from isolation to integration. This shift was bittersweet for many residents—while it allowed for new connections and opportunities, it also brought challenges such as increased noise, loss of privacy, and a blending of diverse social classes that sometimes led to conflict.",
      "Today, the garden reflects these historical tensions. It is a private space where residents can retreat, offering a sense of calm and solitude. However, it also represents how urban spaces can inadvertently foster division. Complaints about noise, maintenance, or neighborly disputes are common and can create invisible walls between residents, discouraging a sense of unity. The garden reminds us that while physical barriers may disappear, emotional and social divides often linger. It challenges us to consider how we engage with our communities—do we use our words and actions to build bridges, or do we unintentionally create walls?",
    ],
    successFeedback: ["Great job! You have finished the game!"],
  },
};

const RiddlePage: React.FC = () => {
  const navigate = useNavigate();
  interface RouteParams extends Record<string, string | undefined> {
    riddleId: string;
  }
  const { riddleId } = useParams<RouteParams>();
  const [selectedAnswers, setSelectedAnswers] = useState<
    Record<number, string | null>
  >({});
  const [feedback, setFeedback] = useState<string | null>(null);

  const riddle = riddleId && riddles[riddleId] ? riddles[riddleId] : undefined;

  useEffect(() => {
    if (!riddle) {
      navigate("/");
    }
  }, [riddle, navigate]);

  if (!riddle) {
    return null;
  }

  const handleAnswer = () => {
    const incorrectAnswers = riddle.questions.some(
      (q, i) => selectedAnswers[i] !== q.correctAnswer
    );

    if (incorrectAnswers) {
      setFeedback("Incorrect. Try again!");
    } else {
      setFeedback(
        "Please proceed to the next location by clicking the 'close' button below."
      );
    }
  };

  const handleAnswerChange = (index: number, answer: string) => {
    if (
      feedback ===
      "Please proceed to the next location by clicking the 'close' button below."
    )
      return;
    setSelectedAnswers((prev) => ({ ...prev, [index]: answer }));
  };

  const handleClose = () => {
    setFeedback(null);
    navigate("/map");
  };

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1>{riddle.title}</h1>
      </div>
      <div className={styles.content}>
        <div className={styles.images}>
          {riddle.images.map((image, index) => (
            <img
              key={index}
              src={image}
              alt={`Riddle ${riddleId} Image ${index + 1}`}
              className={styles.image}
            />
          ))}
        </div>
        {riddle.description.map((paragraph, index) => (
          <p key={index} className={styles.text}>
            {paragraph}
          </p>
        ))}
      </div>

      <div className={styles.quiz}>
        {riddle.questions.map((q, index) => (
          <div key={index} className="mb-4">
            <p>{q.question}</p>
            {q.options.map((option) => (
              <label key={option} className={styles.label}>
                <input
                  type="radio"
                  name={`question-${index}`}
                  value={option}
                  disabled={
                    feedback ===
                    "Please proceed to the next location by clicking the 'close' button below."
                  }
                  onChange={() => handleAnswerChange(index, option)}
                />
                {option}
              </label>
            ))}
            {index < riddle.questions.length - 1 && (
              <hr className="my-4 border-t border-gray-300 mt-8" />
            )}
          </div>
        ))}
        {feedback !==
          "Please proceed to the next location by clicking the 'close' button below." && (
          <div className={styles.buttonContainer}>
            <Button onClick={handleAnswer}>Submit Answers</Button>
          </div>
        )}

        {feedback ===
          "Please proceed to the next location by clicking the 'close' button below." && (
          <div className={styles.successFeedback}>
            {riddle.successFeedback.map((feedbackParagraph, index) => (
              <p key={index}>{feedbackParagraph}</p>
            ))}
          </div>
        )}
      </div>

      {feedback && (
        <FeedbackMessage
          message={feedback}
          type={
            feedback ===
            "Please proceed to the next location by clicking the 'close' button below."
              ? "success"
              : "error"
          }
          onClose={
            feedback ===
            "Please proceed to the next location by clicking the 'close' button below."
              ? handleClose
              : undefined
          }
        />
      )}
    </div>
  );
};

export default RiddlePage;

// File: src/components/RiddlePage/index.ts
export { default } from "./RiddlePage";

// File: src/components/Shared/Button.tsx
import React from "react";

interface ButtonProps {
  onClick: () => void;
  children: React.ReactNode;
  style?: React.CSSProperties;
  className?: string;
}

const Button: React.FC<ButtonProps> = ({
  onClick,
  children,
  style,
  className,
}) => {
  // If you still want some default styling when no className is provided, you can keep the defaultStyle.
  // Otherwise, remove defaultStyle for a purely className-based approach.
  const defaultStyle: React.CSSProperties = {
    backgroundColor: "#007bff",
    color: "#fff",
    border: "none",
    borderRadius: "5px",
    padding: "10px 15px",
    cursor: "pointer",
    fontSize: "16px",
    transition: "background-color 0.3s ease",
    ...style,
  };

  return (
    <button
      className={className}
      style={className ? style : defaultStyle}
      onClick={onClick}
    >
      {children}
    </button>
  );
};

export default Button;

// File: src/components/Shared/FeedbackMessage.tsx
import React from "react";

interface FeedbackMessageProps {
  message: string;
  type: "success" | "error";
  onClose?: () => void;
}

const FeedbackMessage: React.FC<FeedbackMessageProps> = ({
  message,
  type,
  onClose,
}) => {
  const style: React.CSSProperties = {
    padding: "15px",
    borderRadius: "8px",
    backgroundColor: type === "success" ? "#e7f3e9" : "#f8d7da",
    color: type === "success" ? "#2e7d32" : "#721c24",
    textAlign: "center",
    fontSize: "16px",
    fontWeight: "bold",
    marginTop: "20px",
  };

  return (
    <div style={style}>
      <p>{message}</p>
      {onClose && (
        <button
          onClick={onClose}
          style={{
            marginTop: "10px",
            backgroundColor: "#007bff",
            color: "#fff",
            border: "none",
            borderRadius: "5px",
            padding: "8px 12px",
            cursor: "pointer",
            fontSize: "14px",
          }}
        >
          Close
        </button>
      )}
    </div>
  );
};

export default FeedbackMessage;

// File: src/components/Shared/PopupContent.tsx
import React from "react";
import Button from "../Shared/Button";

interface Question {
  question: string;
  answers: string[];
  correctAnswer: string;
}

interface PopupContentProps {
  title: string;
  imgSrc: string;
  description: React.ReactNode;
  questions: Question[];
  coords: [number, number];
  password: string;
  onProceed: (password: string, questionData: Question[]) => void;
}

const PopupContent: React.FC<PopupContentProps> = ({
  title,
  imgSrc,
  description,
  questions,
  coords,
  password,
  onProceed,
}) => {
  return (
    <div className="space-y-4">
      <h3 className="text-xl font-bold">{title}</h3>
      <img src={imgSrc} alt={title} className="w-full h-auto rounded-lg mb-2" />
      <div>{description}</div>
      <p>
        <em>
          <strong>
            Please scan the QR code at this location to reveal the passcode and
            proceed to the riddle.
          </strong>
        </em>
      </p>
      <div className="flex gap-2 justify-center">
        <Button
          onClick={() => onProceed(password, questions)}
          className="bg-white text-black border border-gray-300 shadow px-4 py-2 rounded hover:bg-gray-100 transition-colors duration-150"
        >
          Proceed
        </Button>
        <Button
          onClick={() => {
            const [lat, lng] = coords;
            const mapsUrl = `https://www.google.com/maps?q=${lat},${lng}`;
            window.open(mapsUrl, "_blank");
          }}
          className="bg-white text-black border border-gray-300 shadow px-4 py-2 rounded hover:bg-gray-100 transition-colors duration-150"
        >
          Navigate
        </Button>
      </div>
    </div>
  );
};

export default PopupContent;

// File: src/components/Shared/Shared.module.css
.button {
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  padding: 10px 15px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s ease;
}

.button:hover {
  background-color: #0056b3;
}

.feedback {
  margin-top: 20px;
  padding: 15px;
  border-radius: 8px;
  text-align: center;
  font-size: 16px;
  font-weight: bold;
}

.feedback.success {
  background-color: #e7f3e9;
  color: #2e7d32;
}

.feedback.error {
  background-color: #f8d7da;
  color: #721c24;
}

// File: src/components/Shared/index.ts
export { default as Button } from "./Button";
export { default as FeedbackMessage } from "./FeedbackMessage";

// File: src/styles/global.css
/* Reset styles */
body,
html {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
}

body {
  background-color: #f5f5f5;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0;
}

p {
  margin: 0;
  line-height: 1.6;
}

a {
  text-decoration: none;
  color: inherit;
}

button {
  font-family: inherit;
  border: none;
  cursor: pointer;
}

input {
  font-family: inherit;
}

// File: src/styles/leaflet.css
/* Leaflet Container */
.leaflet-container {
  height: 100%;
  width: 100%;
  outline: none;
}

/* Default Marker Icon */
.leaflet-marker-icon {
  margin: 0;
  padding: 0;
}

.leaflet-popup-content-wrapper {
  border-radius: 8px;
}

// File: src/pages/AboutUs/AboutUs.tsx
const AboutUs = () => {
  return (
    <div className="bg-white-100 py-16 bg-[#0d1321]">
      <div className="max-w-7xl mx-auto px-6 lg:px-8">
        <h1 className="text-5xl font-bold text-white mb-10 mt-10 text-center">
          About Us
        </h1>

        {/* Who We Are Section */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold  text-white mb-6">Who We Are</h2>
          <p className="text-xl text-white leading-relaxed">
            City Escape Games was founded with a mission to redefine how people
            explore cities by blending fun, adventure, and history into one
            interactive experience. We are passionate about creating memorable
            journeys for families, friends, and explorers of all kinds.
          </p>
        </section>

        <hr className="border-t-2 border-white-300 mb-16" />

        {/* What We Do Section */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold  text-white mb-6">What We Do</h2>
          <p className="text-xl text-white leading-relaxed">
            At City Escape Games, we design and develop engaging outdoor escape
            games that take you on a unique journey through your favorite
            cities. Each game combines puzzles, riddles, and city landmarks,
            giving you the perfect blend of entertainment and exploration.
          </p>
          <p className="text-xl text-white leading-relaxed mt-4">
            Our games are accessible via any smartphone or tablet, making it
            easy for anyone to start their adventure. We’re constantly working
            to add new challenges, cities, and features to keep the experience
            fresh and exciting.
          </p>
        </section>

        <hr className="border-t-2 border-white-300 mb-16" />

        {/* Our Vision Section */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold  text-white mb-6">Our Vision</h2>
          <p className="text-xl text-white leading-relaxed">
            Our vision is to make learning and exploration fun for everyone.
            Whether you’re a tourist discovering a city for the first time or a
            local looking for a new way to experience your hometown, we aim to
            bring people closer to history, culture, and each other through the
            power of games.
          </p>
          <p className="text-xl text-white leading-relaxed mt-4">
            We believe in creating experiences that are inclusive, educational,
            and entertaining while leaving players with unforgettable memories.
          </p>
        </section>

        <hr className="border-t-2 border-white-300 mb-16" />

        {/* Meet the Team Section */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold  text-white mb-6">Meet the Team</h2>
          <p className="text-xl text-white leading-relaxed">
            Behind City Escape Games is a team of passionate individuals who
            love adventure and storytelling. Our team includes game designers,
            developers, writers, and local experts who work together to craft
            immersive and exciting experiences for players around the world.
          </p>
          <p className="text-xl text-white leading-relaxed mt-4">
            We are driven by a shared love for discovery and innovation, and we
            strive to bring you the best outdoor escape game experience
            possible.
          </p>
        </section>

        <hr className="border-t-2 border-white-300 mb-16" />

        {/* Contact Us Section */}
        <section>
          <h2 className="text-3xl font-bold  text-white mb-6">Contact Us</h2>
          <p className="text-xl text-white leading-relaxed">
            Have questions or feedback? We’d love to hear from you! Reach out to
            us through our{" "}
            <a href="/contact" className=" text-white underline">
              Contact Us
            </a>{" "}
            page or email us at
            <span className="font-bold"> support@cityescapegames.com</span>.
            Let’s make your next adventure unforgettable!
          </p>
        </section>
      </div>
    </div>
  );
};

export default AboutUs;

// File: src/pages/ContactUs/ContactUs.tsx
const ContactUs = () => {
  return (
    <div className="py-16 bg-[#0d1321]">
      <div className="max-w-7xl mx-auto px-6 lg:px-8">
        <h1 className="text-5xl font-bold  text-white mb-10 mt-10 text-center">
          Contact Us
        </h1>
        <p className="text-xl text-white text-center mb-16">
          Have questions, feedback, or just want to say hello? We'd love to hear
          from you! Reach out to us through any of the options below, and we'll
          get back to you as soon as possible.
        </p>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-12">
          {/* Contact Information Section */}
          <div className="bg-white p-8 rounded-lg shadow-md">
            <h2 className="text-3xl font-bold  text-black mb-6">
              Get in Touch
            </h2>
            <p className="text-lg text-black mb-4">
              Our team is here to assist you with any questions or concerns. You
              can contact us through the following channels:
            </p>
            <ul className="space-y-4 text-lg text-black">
              <li>
                <span className="font-bold">Email:</span>{" "}
                <a
                  href="mailto:support@cityescapegames.com"
                  className=" text-black underline"
                >
                  support@cityescapegames.com
                </a>
              </li>
              <li>
                <span className="font-bold">Phone:</span>{" "}
                <a href="tel:+1234567890" className=" text-black underline">
                  +1 234 567 890
                </a>
              </li>
              <li>
                <span className="font-bold">Address:</span> City Escape Games
                HQ, 123 Adventure Lane, Budapest, Hungary
              </li>
            </ul>
          </div>

          {/* Contact Form Section */}
          <div className="bg-white p-8 rounded-lg shadow-md">
            <h2 className="text-3xl font-bold  text-black mb-6">
              Send Us a Message
            </h2>
            <form>
              <div className="mb-6">
                <label
                  htmlFor="name"
                  className="block text-lg font-medium text-black mb-2"
                >
                  Your Name
                </label>
                <input
                  type="text"
                  id="name"
                  className="w-full p-3 border border-white-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600"
                  placeholder="Enter your name"
                  required
                />
              </div>
              <div className="mb-6">
                <label
                  htmlFor="email"
                  className="block text-lg font-medium text-black mb-2"
                >
                  Your Email
                </label>
                <input
                  type="email"
                  id="email"
                  className="w-full p-3 border border-white-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600"
                  placeholder="Enter your email"
                  required
                />
              </div>
              <div className="mb-6">
                <label
                  htmlFor="message"
                  className="block text-lg font-medium text-black mb-2"
                >
                  Your Message
                </label>
                <textarea
                  id="message"
                  rows={5}
                  className="w-full p-3 border border-white-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600"
                  placeholder="Enter your message"
                  required
                ></textarea>
              </div>
              <button
                type="submit"
                className="w-full bg-white text-black border border-black p-4 rounded-lg shadow-md hover:bg-gray-200 transition"
              >
                Send Message
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ContactUs;

// File: src/pages/FAQ/FAQ.tsx
import React, { useState } from "react";

interface FAQItemProps {
  question: string;
  answer: string;
}

const FAQItem: React.FC<FAQItemProps> = ({ question, answer }) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div>
      <h3
        className="text-2xl text-white mb-2 cursor-pointer flex justify-between items-center"
        onClick={() => setIsOpen(!isOpen)}
      >
        {question}
        <span className="ml-4">{isOpen ? "▲" : "▼"}</span>
      </h3>
      {isOpen && <p className="text-lg text-white">{answer}</p>}
    </div>
  );
};

const FAQ = () => {
  return (
    <div className="bg-[#0d1321] py-16">
      <div className="max-w-7xl mx-auto px-6 lg:px-8">
        <h1 className="text-5xl font-bold text-white mb-10 mt-10 text-center">
          Frequently Asked Questions
        </h1>

        {/* General Questions */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold text-white mb-6">General</h2>
          <div className="space-y-6">
            <FAQItem
              question="What is City Escape Games?"
              answer="City Escape Games is an interactive outdoor escape
              game where you solve riddles, find clues, and uncover fascinating city
              secrets. It’s a fun and educational experience for all ages."
            />
            <FAQItem
              question="How long does the game take?"
              answer="The game takes approximately 2 hours of active playtime.
              However, you can take breaks and play at your own pace."
            />
            <FAQItem
              question="Can I pause the game and resume later?"
              answer="Yes, you can pause the game anytime and resume later. Keep in
              mind that the leaderboard is based on total game time."
            />
          </div>
        </section>

        <hr className="border-t-2 border-white-300 mb-16" />

        {/* Gameplay Questions */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold text-white mb-6">Gameplay</h2>
          <div className="space-y-6">
            <FAQItem
              question="How do I start the game?"
              answer="After purchasing or choosing a game, you will receive a
              passcode. Use this passcode to unlock the game on the map and
              start your adventure."
            />
            <FAQItem
              question="What happens if I answer a question incorrectly?"
              answer="Each incorrect answer results in a time penalty of 45 seconds.
              You can attempt the question again after the penalty."
            />
            <FAQItem
              question="Do I need to download an app to play?"
              answer="No additional apps are required. The game runs directly from our
              web application, accessible on any smartphone or tablet with
              internet access."
            />
          </div>
        </section>

        <hr className="border-t-2 border-white-300 mb-16" />

        {/* Teams and Participation */}
        <section className="mb-16">
          <h2 className="text-3xl font-bold text-white mb-6">
            Teams and Participation
          </h2>
          <div className="space-y-6">
            <FAQItem
              question="Can I play with my friends or family?"
              answer="Yes! The game is designed for groups of all sizes. You can play
              solo or collaborate with friends and family to solve the
              challenges."
            />
            <FAQItem
              question="Can multiple teams compete against each other?"
              answer="Absolutely! Each team can start their own game and compete to
              see who completes the challenges the fastest. Use the
              leaderboard to track your results."
            />
            <FAQItem
              question="Is the game suitable for children?"
              answer="The game is suitable for players aged 15 and above. Younger
              children can join with assistance from adults and still have fun
              navigating and solving clues."
            />
          </div>
        </section>

        <hr className="border-t-2 border-white-300 mb-16" />

        {/* Technical Support */}
        <section>
          <h2 className="text-3xl font-bold text-white mb-6">
            Technical Support
          </h2>
          <div className="space-y-6">
            <FAQItem
              question="What do I do if I experience technical issues?"
              answer="If you encounter any issues, please contact our support team via
              email or through the 'Contact Us' page. We’ll assist you as
              quickly as possible."
            />
            <FAQItem
              question="Do I need an internet connection to play?"
              answer="Yes, an internet connection is required to access the map,
              clues, and other interactive features during the game."
            />
            <FAQItem
              question="Can I play on any device?"
              answer="You can play on any smartphone or tablet with an updated browser
              and internet connection. For the best experience, use a modern
              device."
            />
          </div>
        </section>
      </div>
    </div>
  );
};

export default FAQ;

// File: src/pages/HowItWorks/HowItWorks.tsx
import BudapestLogo from "../../assets/logo.png";
import WhatDoYouNeedLogo from "../../assets/need.png";
import WhoCanPlayLogo from "../../assets/people.png";
import SafetyAndGuidelinesLogo from "../../assets/rules.png";
import ReadyToBeginLogo from "../../assets/ready.png";

const HowItWorks = () => {
  return (
    <div className="bg-white-100 text-white w-full">
      {/* Top Section */}
      <div className="flex flex-col md:flex-row justify-center items-center min-h-screen bg-[#0d1321]">
        {/* Left Section */}
        <div className="flex-1 max-w-2xl mx-auto ml-20 mr-9 text-center">
          <h1 className="text-5xl font-bold text-white text-left mb-8">
            How It Works
          </h1>
          <p className="text-xl text-white leading-relaxed text-left mb-6">
            City Escape Games is a collection of interactive outdoor escape
            games where you solve riddles, find clues, and uncover fascinating
            city secrets. Your journey will take you to iconic landmarks and
            hidden gems while testing your knowledge and puzzle-solving skills.
          </p>
          <ul className="list-disc list-inside space-y-4 text-left text-lg text-white">
            <li>Solving trivia puzzles and entertaining missions.</li>
            <li>Discovering historical landmarks and hidden locations.</li>
            <li>Facing time penalties for incorrect answers.</li>
          </ul>
        </div>

        {/* Right Section */}
        <div className="flex-1 flex justify-center items-center">
          <img
            src={BudapestLogo}
            alt="City Escape Games Logo"
            className="w-1/2 h-auto object-contain"
          />
        </div>
      </div>

      {/* What Do You Need? Section */}
      <section className="flex flex-col md:flex-row justify-center items-center min-h-screen bg-[#1d2d44]">
        {/* Left Section */}
        <div className="flex-1 max-w-2xl mx-auto ml-20 mr-9 text-center">
          <h2 className="text-3xl font-bold text-white text-left mb-6">
            What Do You Need?
          </h2>
          <ul className="list-disc list-inside space-y-4 text-xl text-white text-left ">
            <li>A smartphone or tablet with internet access.</li>
            <li>Comfortable shoes for walking around the city.</li>
            <li>A team name if you’re competing with others.</li>
          </ul>
        </div>

        {/* Right Section */}
        <div className="flex-1 flex justify-center items-center">
          <img
            src={WhatDoYouNeedLogo}
            alt="Placeholder"
            className="w-1/2 h-auto object-contain"
          />
        </div>
      </section>

      {/* Who Can Play? Section */}
      <section className="flex flex-col md:flex-row justify-center items-center min-h-screen bg-[#0d1321]">
        {/* Left Section */}
        <div className="flex-1 max-w-2xl mx-auto ml-20 mr-9 text-center">
          <h2 className="text-3xl font-bold text-white text-left mb-6">
            Who Can Play?
          </h2>
          <p className="text-xl text-white text-left leading-relaxed">
            The game is suitable for players aged 15 and above. Younger players
            can join with a little help from adults.
          </p>
        </div>

        {/* Right Section */}
        <div className="flex-1 flex justify-center items-center">
          <img
            src={WhoCanPlayLogo}
            alt="Placeholder"
            className="w-1/2 h-auto object-contain"
          />
        </div>
      </section>

      {/* Safety and Guidelines Section */}
      <section className="flex flex-col md:flex-row justify-center items-center min-h-screen bg-[#1d2d44]">
        {/* Left Section */}
        <div className="flex-1 max-w-2xl mx-auto ml-20 mr-9 text-center">
          <h2 className="text-3xl font-bold text-white text-left mb-6">
            Safety and Guidelines
          </h2>
          <ul className="list-disc list-inside space-y-4 text-xl text-white text-left">
            <li>Respect local laws and regulations while playing.</li>
            <li>Be cautious in traffic and aware of your surroundings.</li>
            <li>Avoid trespassing or disturbing private property.</li>
            <li>
              Take breaks when needed, but keep an eye on the leaderboard!
            </li>
          </ul>
        </div>

        {/* Right Section */}
        <div className="flex-1 flex justify-center items-center">
          <img
            src={SafetyAndGuidelinesLogo}
            alt="Placeholder"
            className="w-1/2 h-auto object-contain"
          />
        </div>
      </section>

      {/* Ready to Begin? Section */}
      <section className="flex flex-col md:flex-row justify-center items-center min-h-screen bg-[#0d1321]">
        {/* Left Section */}
        <div className="flex-1 max-w-2xl mx-auto ml-20 mr-9 text-center">
          <h2 className="text-3xl font-bold text-white text-left mb-6">
            Ready to Begin?
          </h2>
          <p className="text-xl text-white text-left leading-relaxed">
            Select your city and start your game from the homepage. Solve
            riddles, explore hidden spots, and enjoy the adventure at your own
            pace. Your next escape awaits!
          </p>
        </div>

        {/* Right Section */}
        <div className="flex-1 flex justify-center items-center">
          <img
            src={ReadyToBeginLogo}
            alt="Placeholder"
            className="w-1/2 h-auto object-contain"
          />
        </div>
      </section>
    </div>
  );
};

export default HowItWorks;

// File: index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>React + Vite App</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

// File: src/App.tsx
import "leaflet/dist/leaflet.css";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Navbar from "./components/NavBar/NavBar";
import Footer from "./components/Footer/Footer";
import Home from "./components/Home/Home";
import Map from "./components/Map/Map";
import RiddlePage from "./components/RiddlePage/RiddlePage";
import HowItWorks from "./pages/HowItWorks/HowItWorks";
import FAQ from "./pages/FAQ/FAQ";
import AboutUs from "./pages/AboutUs/AboutUs";
import ContactUs from "./pages/ContactUs/ContactUs";

const App = () => {
  return (
    <Router>
      <Navbar />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/map" element={<Map />} />
        <Route path="/riddle/:riddleId" element={<RiddlePage />} />
        <Route path="/how-it-works" element={<HowItWorks />} />
        <Route path="/faq" element={<FAQ />} />
        <Route path="/about" element={<AboutUs />} />
        <Route path="/contact" element={<ContactUs />} />
      </Routes>
      <Footer />
    </Router>
  );
};

export default App;

// File: src/main.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

